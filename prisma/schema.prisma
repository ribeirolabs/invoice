// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  invoices  Invoice[]
  companies CompaniesOnUsers[] @relation("user")
  shared    CompaniesOnUsers[] @relation("sharedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                   String  @id @default(cuid())
  name                 String
  address              String
  invoiceNumberPattern String
  currency             String  @default("USD")
  alias                String?
  email                String  @default("update-me@email.com")

  users            CompaniesOnUsers[]
  receiverInvoices Invoice[]          @relation("receiver")
  payerInvoices    Invoice[]          @relation("payer")
}

enum UserType {
  OWNED
  SHARED
}

model CompaniesOnUsers {
  user   User   @relation("user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  sharedBy   User?   @relation("sharedBy", fields: [sharedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sharedById String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String

  owner Boolean  @default(false)
  type  UserType

  @@id([userId, companyId])
  @@unique([userId, companyId])
}

model Invoice {
  id          String   @id @default(cuid())
  number      String
  description String
  amount      Float
  currency    String
  createdAt   DateTime @default(now())
  issuedAt    DateTime
  expiredAt   DateTime
  data        Json?

  receiver   Company @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String

  payer   Company @relation("payer", fields: [payerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payerId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  emailHistory InvoiceEmailHistory[]

  @@unique([number, receiverId, payerId])
}

model InvoiceEmailHistory {
  id    String @id @default(cuid())
  email String

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
